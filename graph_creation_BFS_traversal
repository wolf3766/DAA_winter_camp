//graph implementation using maps in c++;
//bfs implementation

#include<bits/stdc++.h>
#define ll long long
using namespace std;

class Graph{
public:
  unordered_map<int,bool>visited;
  unordered_map<int,vector<int>>adj;

  void bfs(int v);
  void addEdge(int s,int e);
};

void Graph::bfs(int v){
  visited[v]=true;
  queue<int>q;
  q.push(v);

  while(!q.empty()){
    int fr=q.front();
    cout<<fr<<" ";
    q.pop();
    for(auto i:adj[fr]){
      if(!visited[i]){
      q.push(i);
      visited[i]=true;
    }
    }
  }


}

void Graph::addEdge(int s,int e){
  adj[s].push_back(e);
}


int main(){
   
    Graph g;
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);
   

    g.bfs(2);

    return 0;
}
